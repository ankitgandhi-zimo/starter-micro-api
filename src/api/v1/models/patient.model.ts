import { getModelForClass, index, prop, Ref } from "@typegoose/typegoose";
import { PaginatedModel } from "../common/pagination/pagination_configuration";
import { Cards } from "./cards.model";
import { Clinic } from "./clinic.model";
import { Country } from "./country.model";
import { FinancialClass } from "./financialclass.model";
import { Roles } from "./roles.model";
import { States } from "./state.model";
import { User } from "./user.model";
export enum EModeValues {
  FULL = "FULL",
  SPLIT = "SPLIT",
  EMI = "EMI",
}

export enum EOccurenceValues {
  FIFTEEN = 15,
  THIRTY = 30,
  FOURTYFIVE = 45,
  ZERO = 0,
}

export enum EFullValues {
  CASH = "CASH",
  CARD = "CARD",
  CHEQUE = "CHEQUE",
  LINK = "LINK",
}

class FullObject {
  @prop({ type: String, default: null })
  email!: string;

  @prop({
    enum: EFullValues,
    type: String,
    default: EFullValues.CASH,
  })
  type!: string;

  @prop({ ref: "Cards", default: null })
  card_id!: Ref<Cards> | null;
}

class EmiObject {
  @prop({
    enum: EOccurenceValues,
    type: Number,
    default: EOccurenceValues.ZERO,
  })
  type!: number;

  @prop({
    enum: EOccurenceValues,
    type: Number,
    default: 0,
  })
  occurrence!: number;

  //   @prop({ ref: "Cards", default: null })
  //   card_id!: Ref<Cards> | null;
}

class SplitObject {
  @prop()
  p1!: P1Object;

  @prop()
  p2!: P2Object;
}

class P1Object {
  @prop({ type: String, default: null })
  email!: string;

  @prop({
    enum: EModeValues,
    type: String,
    default: null,
  })
  type!: string;

  //   @prop({ ref: "Cards", default: null })
  //   card_id!: Ref<Cards> | null;
}

class P2Object {
  @prop({ type: String, default: null })
  email!: string;

  @prop({
    enum: EModeValues,
    type: String,
    default: null,
  })
  type!: string;
}

class PreferedObject {
  @prop({ type: String, default: "" })
  mobileNo!: string;

  @prop({ type: String, default: "" })
  name!: string;

  @prop({ type: String, default: "" })
  relation!: string;
}

class AlternativeObject {
  @prop({ type: String, default: "" })
  mobileNo!: string;

  @prop({ type: String, default: "" })
  name!: string;

  @prop({ type: String, default: "" })
  relation!: string;
}

class ContactObject {
  @prop({ type: PreferedObject })
  prefered!: PreferedObject;

  @prop({ type: AlternativeObject }) // optinal
  alternative!: AlternativeObject;
}

class PaymentObject {
  @prop({
    enum: EModeValues,
    type: String,
    default: EModeValues.FULL,
  })
  mode!: string;

  @prop()
  full!: FullObject;

  @prop()
  emi!: EmiObject;

  @prop()
  split!: SplitObject | null;
}
@index({ email: "text" })
export class Patients extends PaginatedModel {
  @prop({ type: String, default: "" }) //optional
  GI!: string;

  @prop({ type: String, default: "" }) //optional
  SO!: string;

  @prop({ type: String, default: "" }) //optional
  SSN!: string;

  @prop({ type: String, default: "" })
  city!: string;

  // @prop({ type: String, default: "" })
  // token!: string;

  @prop({ type: String, default: "" })
  image!: string;

  @prop({ type: String, default: "" })
  title!: string;

  @prop({ type: String, default: "" })
  email!: string;

  @prop({ type: String, default: "" })
  gender!: string;

  @prop({ type: String, default: "" })
  address!: string;

  // @prop({ type: String, default: "" })
  // resetkey!: string;

  @prop({ type: String, default: "" })
  last_name!: string;

  @prop({ type: String, default: "" })
  first_name!: string;

  @prop({ type: String, default: "" }) // generated by self Fist letter first name and fist letter of last name---total 9 digit nemric number
  patientId!: string;

  @prop({ type: String, default: "" })
  time_zone!: string;

  @prop({ type: String, default: "" })
  appartment!: string;

  @prop({ type: String, default: "" }) ///////optional
  middle_name!: string;

  @prop({ type: String, default: null })
  password!: string;

  @prop({ type: String, default: "" })
  date_of_birth!: string;

  @prop({ type: String, default: "" })
  postal_code!: string;

  @prop({ type: Boolean, default: true })
  isActive!: boolean;

  @prop({ type: String, default: "" }) //optinal
  marital_status!: string;

  // @prop({ type: String, default: "" }) //optinal
  // sexual_orientation!: string;

  @prop({ type: Boolean, default: false })
  isDeleted!: boolean;

  @prop({ type: String, default: "" }) //optional    only in minor case   dob <18
  responsible_person!: string;

  @prop({ ref: "Country" })
  country!: Ref<Country> | null;

  @prop({ ref: Clinic })
  clinic_id!: Ref<Clinic> | null;

  @prop({ type: String, default: [] })
  cards!: string[];

  @prop({ ref: "Roles" })
  role!: Ref<Roles> | null;

  @prop({ ref: "States" })
  state!: Ref<States>;

  @prop({
    type: ContactObject,
    default: ContactObject,
  })
  contact!: ContactObject;

  @prop()
  payment!: PaymentObject;

  @prop({ ref: User })
  createdby_id!: Ref<User> | null;

  // @prop({ type: String, default: "" })
  // emergency_person_relation!: string;

  // @prop({ type: String, default: "" })
  // emergency_person_Contact!: string;

  // @prop({ type: String, default: "" })
  // emergency_person_name!: string;

  // @prop({ ref: User })
  // verifiedby_id!: Ref<User> | null;

  @prop({ type: Boolean, default: false })
  isVerified!: boolean;

  @prop({
    ref: "FinancialClass",
    default: "611212443db9f0480d968011",
  })
  financialClass_id!: Ref<FinancialClass> | null;

  @prop({ type: String, default: null })
  customer_id_stripe!: string;

  @prop()
  role_permission!: any;

  @prop({ type: Boolean, default: false })
  mergeStatus!: boolean;
}

const PATIENT_DB_MODEL = getModelForClass(Patients, {
  schemaOptions: {
    collection: "patients",
    timestamps: true,
  },
});

export default PATIENT_DB_MODEL;
